{"version":3,"sources":["webpack:///./js/task-1.js","webpack:///./js/task-2.js","webpack:///./js/task-3.js"],"names":["delay","ms","Promise","resolve","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","updatedUsers","map","user","table","makeTransaction","transaction","min","max","Math","floor","random","reject","setTimeout","id","logSuccess","amount","logError","warn","catch"],"mappings":"iJAAMA,EAAQ,SAAAC,GAEV,OAAOC,QAAQC,QAAQF,IAErBG,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAGvBL,EAAM,KAAMQ,KAAKJ,GACjBJ,EAAM,KAAMQ,KAAKJ,GACjBJ,EAAM,MAAMQ,KAAKJ,G,kCCTXK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GACjC,IAAMC,EAAeF,EAASG,KAAI,SAAAC,GAAI,OACpCA,EAAKP,OAASI,EAAd,iBAA8BG,EAA9B,CAAoCN,QAASM,EAAKN,SAAWM,KAG/D,OAAOf,QAAQC,QAAQY,IAGnBX,EAAS,SAAAW,GAAY,OAAIT,QAAQY,MAAMH,IAG7CH,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ,GCnBnC,IAIMe,EAAkB,SAACC,GACrB,IAL+BC,EAAKC,EAK9BtB,GALyBqB,EAKS,IALJC,EAKS,IAJxCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAMlD,OAAO,IAAInB,SAAQ,SAACC,EAASuB,GACzBC,YAAW,WACIJ,KAAKE,SAAW,IAGjCtB,EAAQiB,GAENM,EAAQN,EAAYQ,MAEvB5B,OAKC6B,EAAa,SAAC,GAAyB,IAAvBD,EAAuB,EAAvBA,GAAYvB,EAAW,EAAnByB,OACxBxB,QAAQC,IAAR,eAA2BqB,EAA3B,iBAA8CvB,EAA9C,QAGI0B,EAAW,SAAAH,GACftB,QAAQ0B,KAAR,gCAA6CJ,EAA7C,8BAGFT,EAAgB,CAAES,GAAI,GAAIE,OAAQ,MAC/BtB,KAAKqB,GACLI,MAAMF,GAETZ,EAAgB,CAAES,GAAI,GAAIE,OAAQ,MAC/BtB,KAAKqB,GACLI,MAAMF,GAETZ,EAAgB,CAAES,GAAI,GAAIE,OAAQ,KAC/BtB,KAAKqB,GACLI,MAAMF,GAETZ,EAAgB,CAAES,GAAI,GAAIE,OAAQ,MAC/BtB,KAAKqB,GACLI,MAAMF,G","file":"main.8a32079d58b4fa51d258.js","sourcesContent":["const delay = ms => {\n  // Твой код\n    return Promise.resolve(ms)\n};\nconst logger = time => console.log(`Resolved after ${time}ms`);\n\n// Вызовы функции для проверки\ndelay(2000).then(logger); // Resolved after 2000ms\ndelay(1000).then(logger); // Resolved after 1000ms\ndelay(1500).then(logger); // Resolved after 1500ms\n","const users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: true },\n  { name: 'Lux', active: false },\n];\n\nconst toggleUserState = (allUsers, userName) => {\n  const updatedUsers = allUsers.map(user =>\n    user.name === userName ? { ...user, active: !user.active } : user,\n  );\n\n  return Promise.resolve(updatedUsers);\n};\n\nconst logger = updatedUsers => console.table(updatedUsers);\n\n\ntoggleUserState(users, 'Mango').then(logger);\ntoggleUserState(users, 'Lux').then(logger);\n","const randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = (transaction) => {\n    const delay = randomIntegerFromInterval(200, 500);\n    \n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n    const canProcess = Math.random() > 0.3;\n\n    if (canProcess) {\n      resolve(transaction);\n    }\n        reject (transaction.id);\n\n  }, delay);\n    })\n\n};\n\nconst logSuccess = ({ id, amount: time }) => {\n  console.log(`Transaction ${id} processed in ${time} ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\nmakeTransaction({ id: 70, amount: 150 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 })\n  .then(logSuccess)\n  .catch(logError);"],"sourceRoot":""}